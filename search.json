[{"path":"https://sckott.github.io/astr/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (https://contributor-covenant.org), version 1.0.0, available https://contributor-covenant.org/version/1/0/0/","code":""},{"path":[]},{"path":"https://sckott.github.io/astr/CONTRIBUTING.html","id":"bugs","dir":"","previous_headings":"","what":"Bugs?","title":"CONTRIBUTING","text":"Submit issue Issues page","code":""},{"path":"https://sckott.github.io/astr/CONTRIBUTING.html","id":"code-contributions","dir":"","previous_headings":"","what":"Code contributions","title":"CONTRIBUTING","text":"Fork repo Github account Clone version account machine account, e.g,. git clone https://github.com/<yourgithubusername>/astr.git Make sure track progress upstream (.e., version astr sckott/astr) git remote add upstream https://github.com/sckott/astr.git. making changes make sure pull changes upstream either git fetch upstream merge later git pull upstream fetch merge one step Make changes (bonus points making changes new feature branch) Push account Submit pull request home base sckott/astr","code":""},{"path":"https://sckott.github.io/astr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Scott Chamberlain. Author, maintainer.","code":""},{"path":"https://sckott.github.io/astr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chamberlain S (2024). astr: Decompose Recompose Functions. R package version 0.0.1.99, https://sckott.github.io/astr/, https://github.com/sckott/astr.","code":"@Manual{,   title = {astr: Decompose and Recompose Functions},   author = {Scott Chamberlain},   year = {2024},   note = {R package version 0.0.1.99, https://sckott.github.io/astr/},   url = {https://github.com/sckott/astr}, }"},{"path":"https://sckott.github.io/astr/index.html","id":"astr","dir":"","previous_headings":"","what":"Decompose and Recompose Functions","title":"Decompose and Recompose Functions","text":"Decompose Recompose Functions","code":""},{"path":"https://sckott.github.io/astr/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Decompose and Recompose Functions","text":"","code":"remotes::install_github(\"sckott/astr\") library(\"astr\")"},{"path":"https://sckott.github.io/astr/index.html","id":"decompose","dir":"","previous_headings":"","what":"decompose","title":"Decompose and Recompose Functions","text":"simple function decompose function","code":"foo <- function(x) {   x + 1 } foo(5) #> [1] 6 df <- ast_decompose(foo) df #> { fxn: foo } #> function (x) #> { #>     x + 1 #> } class(df) #> [1] \"ast\"        \"data.frame\""},{"path":"https://sckott.github.io/astr/index.html","id":"modify","dir":"","previous_headings":"","what":"modify","title":"Decompose and Recompose Functions","text":"modify aspect function","code":"out <- ast_modify(df, from = \"+\", to = \"-\") out #> { fxn: foo } #> function (x) #> { #>     x - 1 #> }"},{"path":"https://sckott.github.io/astr/index.html","id":"recompose","dir":"","previous_headings":"","what":"recompose","title":"Decompose and Recompose Functions","text":"","code":"ast_recompose(out) #> [1] \"function (x)\\n{\\n    x - 1\\n}\" ex <- ast_recompose(out, as_expr = TRUE) eval(ex)(5) #> [1] 4"},{"path":"https://sckott.github.io/astr/index.html","id":"meta","dir":"","previous_headings":"","what":"Meta","title":"Decompose and Recompose Functions","text":"Please report issues bugs. License: MIT Get citation information astr R citation(package = 'astr') Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://sckott.github.io/astr/reference/ast_decompose.html","id":null,"dir":"Reference","previous_headings":"","what":"Decompose an R function — ast_decompose","title":"Decompose an R function — ast_decompose","text":"Decompose R function","code":""},{"path":"https://sckott.github.io/astr/reference/ast_decompose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decompose an R function — ast_decompose","text":"","code":"ast_decompose(x)"},{"path":"https://sckott.github.io/astr/reference/ast_decompose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decompose an R function — ast_decompose","text":"x function","code":""},{"path":"https://sckott.github.io/astr/reference/ast_decompose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decompose an R function — ast_decompose","text":"result utils::getParseData(), data.frame; wrap thin S3 wrapper make easy see function changes modify ast_modify()","code":""},{"path":"https://sckott.github.io/astr/reference/ast_decompose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decompose an R function — ast_decompose","text":"","code":"foo <- function(x) {   x + 1 } foo(5) #> [1] 6 df <- ast_decompose(foo) df #> { fxn: foo } #> function (x) #> { #>     x + 1 #> } data.frame(df) #>    line1 col1 line2 col2 id parent          token terminal     text #> 1      1    1     1    8  1     23       FUNCTION     TRUE function #> 2      1   10     1   10  2     23            '('     TRUE        ( #> 3      1   11     1   11  3     23 SYMBOL_FORMALS     TRUE        x #> 4      1   12     1   12  4     23            ')'     TRUE        ) #> 7      2    1     2    1  7     20            '{'     TRUE        { #> 9      3    5     3    5  9     11         SYMBOL     TRUE        x #> 10     3    7     3    7 10     15            '+'     TRUE        + #> 12     3    9     3    9 12     13      NUM_CONST     TRUE        1 #> 18     4    1     4    1 18     20            '}'     TRUE        } attributes(df) #> $names #> [1] \"line1\"    \"col1\"     \"line2\"    \"col2\"     \"id\"       \"parent\"   \"token\"    #> [8] \"terminal\" \"text\"     #>  #> $srcfile #> <text>  #>  #> $row.names #> [1]  1  2  3  4  7  9 10 12 18 #>  #> $class #> [1] \"ast\"        \"data.frame\" #>  #> $name #> [1] \"foo\" #>  #> $expr #>    line1 col1 line2 col2 id parent token terminal #> 23     1    1     4    1 23      0  expr    FALSE #> 20     2    1     4    1 20     23  expr    FALSE #> 15     3    5     3    9 15     20  expr    FALSE #> 11     3    5     3    5 11     15  expr    FALSE #> 13     3    9     3    9 13     15  expr    FALSE #>                              text #> 23 function (x) \\n{\\n    x + 1\\n} #> 20                {\\n    x + 1\\n} #> 15                          x + 1 #> 11                              x #> 13                              1 #>  attr(df, \"expr\") #>    line1 col1 line2 col2 id parent token terminal #> 23     1    1     4    1 23      0  expr    FALSE #> 20     2    1     4    1 20     23  expr    FALSE #> 15     3    5     3    9 15     20  expr    FALSE #> 11     3    5     3    5 11     15  expr    FALSE #> 13     3    9     3    9 13     15  expr    FALSE #>                              text #> 23 function (x) \\n{\\n    x + 1\\n} #> 20                {\\n    x + 1\\n} #> 15                          x + 1 #> 11                              x #> 13                              1 attr(df, \"expr\")[1,\"text\"] # the original fxn #> [1] \"function (x) \\n{\\n    x + 1\\n}\""},{"path":"https://sckott.github.io/astr/reference/ast_modify.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify an R function — ast_modify","title":"Modify an R function — ast_modify","text":"Modify R function","code":""},{"path":"https://sckott.github.io/astr/reference/ast_modify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify an R function — ast_modify","text":"","code":"ast_modify(x, from, to, if_many = \"random\", no_match = stop)"},{"path":"https://sckott.github.io/astr/reference/ast_modify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify an R function — ast_modify","text":"x object class ast (character) character string replace. note look exact match (character) character string put place if_many (character) multiple matches parameter input, randomly select one replace, replace first instance, replace ? one : first, , random no_match (function) deal matches. default stop(), can set warning() message()","code":""},{"path":"https://sckott.github.io/astr/reference/ast_modify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify an R function — ast_modify","text":"input, object class ast, modified","code":""},{"path":"https://sckott.github.io/astr/reference/ast_modify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Modify an R function — ast_modify","text":"check input match function data, , fail ","code":""},{"path":"https://sckott.github.io/astr/reference/ast_modify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify an R function — ast_modify","text":"","code":"foo <- function(x) {   x + 1 } foo(5) #> [1] 6  # decompose the function df <- ast_decompose(foo) df #> { fxn: foo } #> function (x) #> { #>     x + 1 #> } data.frame(df) #>    line1 col1 line2 col2 id parent          token terminal     text #> 1      1    1     1    8  1     23       FUNCTION     TRUE function #> 2      1   10     1   10  2     23            '('     TRUE        ( #> 3      1   11     1   11  3     23 SYMBOL_FORMALS     TRUE        x #> 4      1   12     1   12  4     23            ')'     TRUE        ) #> 7      2    1     2    1  7     20            '{'     TRUE        { #> 9      3    5     3    5  9     11         SYMBOL     TRUE        x #> 10     3    7     3    7 10     15            '+'     TRUE        + #> 12     3    9     3    9 12     13      NUM_CONST     TRUE        1 #> 18     4    1     4    1 18     20            '}'     TRUE        } attr(df, \"expr\") #>    line1 col1 line2 col2 id parent token terminal #> 23     1    1     4    1 23      0  expr    FALSE #> 20     2    1     4    1 20     23  expr    FALSE #> 15     3    5     3    9 15     20  expr    FALSE #> 11     3    5     3    5 11     15  expr    FALSE #> 13     3    9     3    9 13     15  expr    FALSE #>                              text #> 23 function (x) \\n{\\n    x + 1\\n} #> 20                {\\n    x + 1\\n} #> 15                          x + 1 #> 11                              x #> 13                              1  # modify an aspect of the function out <- ast_modify(x = df, from = \"+\", to = \"-\") out #> { fxn: foo } #> function (x) #> { #>     x - 1 #> } class(out) #> [1] \"ast\"        \"data.frame\" attributes(out) #> $names #>  [1] \"line1\"           \"col1\"            \"line2\"           \"col2\"            #>  [5] \"id\"              \"parent\"          \"token\"           \"terminal\"        #>  [9] \"text\"            \"mutated\"         \"mutated_from_to\" #>  #> $srcfile #> <text>  #>  #> $row.names #> [1]  1  2  3  4  7  9 10 12 18 #>  #> $name #> [1] \"foo\" #>  #> $expr #>    line1 col1 line2 col2 id parent token terminal #> 23     1    1     4    1 23      0  expr    FALSE #> 20     2    1     4    1 20     23  expr    FALSE #> 15     3    5     3    9 15     20  expr    FALSE #> 11     3    5     3    5 11     15  expr    FALSE #> 13     3    9     3    9 13     15  expr    FALSE #>                              text #> 23 function (x) \\n{\\n    x + 1\\n} #> 20                {\\n    x + 1\\n} #> 15                          x + 1 #> 11                              x #> 13                              1 #>  #> $class #> [1] \"ast\"        \"data.frame\" #>  data.frame(out) #>    line1 col1 line2 col2 id parent          token terminal     text mutated #> 1      1    1     1    8  1     23       FUNCTION     TRUE function   FALSE #> 2      1   10     1   10  2     23            '('     TRUE        (   FALSE #> 3      1   11     1   11  3     23 SYMBOL_FORMALS     TRUE        x   FALSE #> 4      1   12     1   12  4     23            ')'     TRUE        )   FALSE #> 7      2    1     2    1  7     20            '{'     TRUE        {   FALSE #> 9      3    5     3    5  9     11         SYMBOL     TRUE        x   FALSE #> 10     3    7     3    7 10     15            '+'     TRUE        -    TRUE #> 12     3    9     3    9 12     13      NUM_CONST     TRUE        1   FALSE #> 18     4    1     4    1 18     20            '}'     TRUE        }   FALSE #>    mutated_from_to #> 1             <NA> #> 2             <NA> #> 3             <NA> #> 4             <NA> #> 7             <NA> #> 9             <NA> #> 10             +,- #> 12            <NA> #> 18            <NA> attr(out, \"expr\") #>    line1 col1 line2 col2 id parent token terminal #> 23     1    1     4    1 23      0  expr    FALSE #> 20     2    1     4    1 20     23  expr    FALSE #> 15     3    5     3    9 15     20  expr    FALSE #> 11     3    5     3    5 11     15  expr    FALSE #> 13     3    9     3    9 13     15  expr    FALSE #>                              text #> 23 function (x) \\n{\\n    x + 1\\n} #> 20                {\\n    x + 1\\n} #> 15                          x + 1 #> 11                              x #> 13                              1  # more examples bar <- function(x) x / 6 (z <- ast_decompose(bar)) #> { fxn: bar } #> function (x) #> x/6 ast_modify(z, from = \"/\", to = \"*\") #> { fxn: bar } #> function (x) #> x*6  # to get the new function, pass through ast_recompose b <- ast_modify(z, from = \"/\", to = \"*\") newbar <- ast_recompose(b, TRUE) bar(7) #> [1] 1.166667 eval(newbar)(7) #> [1] 42  # multiple from matches foo <- function(x) {   w <- x + 1   w + 5 } foo(1) #> [1] 7 x <- ast_decompose(foo) (w <- ast_modify(x, \"+\", \"-\")) #> { fxn: foo } #> function (x) #> { #>     w <- x - 1 #>     w + 5 #> } eval(ast_recompose(w, TRUE))(1) #> [1] 5  # if_many options ast_modify(x, \"+\", \"-\", if_many = \"random\") #> { fxn: foo } #> function (x) #> { #>     w <- x - 1 #>     w + 5 #> } ast_modify(x, \"+\", \"-\", if_many = \"random\") #> { fxn: foo } #> function (x) #> { #>     w <- x + 1 #>     w - 5 #> } ast_modify(x, \"+\", \"-\", if_many = \"random\") #> { fxn: foo } #> function (x) #> { #>     w <- x - 1 #>     w + 5 #> } ast_modify(x, \"+\", \"-\", if_many = \"first\") #> { fxn: foo } #> function (x) #> { #>     w <- x - 1 #>     w + 5 #> } ast_modify(x, \"+\", \"-\", if_many = \"all\") #> { fxn: foo } #> function (x) #> { #>     w <- x - 1 #>     w - 5 #> }"},{"path":"https://sckott.github.io/astr/reference/ast_recompose.html","id":null,"dir":"Reference","previous_headings":"","what":"Recompose an R function — ast_recompose","title":"Recompose an R function — ast_recompose","text":"Recompose R function","code":""},{"path":"https://sckott.github.io/astr/reference/ast_recompose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recompose an R function — ast_recompose","text":"","code":"ast_recompose(x, as_expr = FALSE)"},{"path":"https://sckott.github.io/astr/reference/ast_recompose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recompose an R function — ast_recompose","text":"x object class ast as_expr (logical) return function expression? default: FALSE","code":""},{"path":"https://sckott.github.io/astr/reference/ast_recompose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recompose an R function — ast_recompose","text":"function character string, expression as_expr=TRUE","code":""},{"path":"https://sckott.github.io/astr/reference/ast_recompose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recompose an R function — ast_recompose","text":"","code":"foo <- function(x) {   x + 1 } foo(5) #> [1] 6  # decompose the function df <- ast_decompose(foo) df #> { fxn: foo } #> function (x) #> { #>     x + 1 #> }  # recompose the function fun <- ast_recompose(df) fun #> [1] \"function (x)\\n{\\n    x + 1\\n}\"  parse(text = fun) #> expression(function(x) { #>     x + 1 #> }) eval(parse(text = fun)) #> function (x)  #> { #>     x + 1 #> } #> <environment: 0x5640597d3800> eval(parse(text = fun))(5) #> [1] 6"},{"path":"https://sckott.github.io/astr/reference/astr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"astr: Decompose and Recompose Functions — astr-package","title":"astr: Decompose and Recompose Functions — astr-package","text":"Decompose Recompose Functions.","code":""},{"path":[]},{"path":"https://sckott.github.io/astr/reference/astr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"astr: Decompose and Recompose Functions — astr-package","text":"Maintainer: Scott Chamberlain sckott@protonmail.com","code":""}]
